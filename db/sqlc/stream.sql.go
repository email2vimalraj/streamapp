// Code generated by sqlc. DO NOT EDIT.
// source: stream.sql

package db

import (
	"context"
)

const createStream = `-- name: CreateStream :one
INSERT INTO streams (stream_name, stream_link, username)
VALUES ($1, $2, $3)
RETURNING id, stream_name, stream_link, username, created_at
`

type CreateStreamParams struct {
	StreamName string `json:"stream_name"`
	StreamLink string `json:"stream_link"`
	Username   string `json:"username"`
}

func (q *Queries) CreateStream(ctx context.Context, arg CreateStreamParams) (Stream, error) {
	row := q.db.QueryRowContext(ctx, createStream, arg.StreamName, arg.StreamLink, arg.Username)
	var i Stream
	err := row.Scan(
		&i.ID,
		&i.StreamName,
		&i.StreamLink,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}

const getStream = `-- name: GetStream :one
SELECT id, stream_name, stream_link, username, created_at
FROM streams
WHERE stream_name = $1
LIMIT 1
`

func (q *Queries) GetStream(ctx context.Context, streamName string) (Stream, error) {
	row := q.db.QueryRowContext(ctx, getStream, streamName)
	var i Stream
	err := row.Scan(
		&i.ID,
		&i.StreamName,
		&i.StreamLink,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}

const listStreams = `-- name: ListStreams :many
SELECT id, stream_name, stream_link, username, created_at
FROM streams
WHERE username = $1
ORDER BY id
LIMIT $2 OFFSET $3
`

type ListStreamsParams struct {
	Username string `json:"username"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) ListStreams(ctx context.Context, arg ListStreamsParams) ([]Stream, error) {
	rows, err := q.db.QueryContext(ctx, listStreams, arg.Username, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Stream{}
	for rows.Next() {
		var i Stream
		if err := rows.Scan(
			&i.ID,
			&i.StreamName,
			&i.StreamLink,
			&i.Username,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
