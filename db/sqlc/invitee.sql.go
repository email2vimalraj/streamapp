// Code generated by sqlc. DO NOT EDIT.
// source: invitee.sql

package db

import (
	"context"
	"database/sql"
)

const createInvitee = `-- name: CreateInvitee :one
INSERT INTO invitees (
    full_name,
    inviter,
    stream_id,
    email,
    mobile_number
  )
VALUES ($1, $2, $3, $4, $5)
RETURNING id, full_name, email, mobile_number, inviter, stream_id, created_at
`

type CreateInviteeParams struct {
	FullName     string         `json:"full_name"`
	Inviter      string         `json:"inviter"`
	StreamID     int64          `json:"stream_id"`
	Email        sql.NullString `json:"email"`
	MobileNumber sql.NullString `json:"mobile_number"`
}

func (q *Queries) CreateInvitee(ctx context.Context, arg CreateInviteeParams) (Invitee, error) {
	row := q.db.QueryRowContext(ctx, createInvitee,
		arg.FullName,
		arg.Inviter,
		arg.StreamID,
		arg.Email,
		arg.MobileNumber,
	)
	var i Invitee
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.MobileNumber,
		&i.Inviter,
		&i.StreamID,
		&i.CreatedAt,
	)
	return i, err
}

const listInvitees = `-- name: ListInvitees :many
SELECT id, full_name, email, mobile_number, inviter, stream_id, created_at
FROM invitees
WHERE inviter = $1
  AND stream_id = $2
ORDER BY id
LIMIT $3 OFFSET $4
`

type ListInviteesParams struct {
	Inviter  string `json:"inviter"`
	StreamID int64  `json:"stream_id"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) ListInvitees(ctx context.Context, arg ListInviteesParams) ([]Invitee, error) {
	rows, err := q.db.QueryContext(ctx, listInvitees,
		arg.Inviter,
		arg.StreamID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Invitee{}
	for rows.Next() {
		var i Invitee
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.MobileNumber,
			&i.Inviter,
			&i.StreamID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
